}
}
ez<-exp(z2)
v2<- -1/fd
g2<-2*log(z2+C)+z2*y -((z2-E0)^2)/2-log(1+ez)
eta2<-exp(g2)*sqrt(2*pi*v2)
# Tierney and Kadane approximation to E([Z+C]^2) and Var(Z)
E2<-eta2/eta0
postvar<-E2-E1^2
return(list(E1=postmean,V1=postvar))
}
TKalbumin(y=0,E0=1,cuts,tol=1E-5,n=20)
TKalbumin(y=1,E0=1,cuts,tol=1E-5,n=20)
TKalbumin(y=1,E0=-2,cuts,tol=1E-5,n=20)
TKalbumin(y=1,E0=-1,cuts,tol=1E-5,n=20)
TKalbumin(y=0,E0=0,cuts,tol=1E-5,n=20)
TKordinal<-function(y,E0,V0,cuts,tol=1E-5,n=20)
{#MF 06/10/18
#y is an ordinal variable with possible values 1,2,...,m. If m=2 then we must set V0=1.
m<-length(cuts)+1
# Initial approximation
z0<-E0
d<-1
for (i in 1:n)
{if (abs(d)>tol)
{if (y==m)
{puz<-1}
else
{euz<-exp(cuts[y]-z0)
puz<-euz/(1+euz)
}
if (y==1)
{plz<-0}
else
{elz<-exp(cuts[y-1]-z0)
plz<-elz/(1+elz)
}
f<-(puz+plz)-1-(z0-E0)/V0
fd<--(1/V0+puz*(1-puz)+plz*(1-plz))
d<-f/fd
z0<-z0-d
}
}
vpost0<- -1/fd
# Tierney and Kadane normalising constant (denominator)
if (y==m)
{puz<-1}
else
{euz<-exp(cuts[y]-z0)
puz<-euz/(1+euz)
}
if (y==1)
{plz<-0}
else
{elz<-exp(cuts[y-1]-z0)
plz<-elz/(1+elz)
}
g0<-log(puz-plz)-((z0-E0)^2)/(2*V0)
eta0<-exp(g0)*sqrt(2*pi*vpost0)
# Mean shift
C<-5*sqrt(vpost0)-z0
# Tierney and Kadane numerator for E(Z+C)
z1<-z0
d<-1
for (i in 1:n)
{if (abs(d)>tol)
{f<-(puz+plz)-1-(z1-E0)/V0+1/(z1+C)
fd<--(1/V0+puz*(1-puz)+plz*(1-plz)+(z1+C)^(-2))
d<-f/fd
z1<-z1-d
if (y==m)
{puz<-1}
else
{euz<-exp(cuts[y]-z1)
puz<-euz/(1+euz)
}
if (y==1)
{plz<-0}
else
{elz<-exp(cuts[y-1]-z1)
plz<-elz/(1+elz)
}
}
}
v1<- -1/fd
g1<-log(z1+C)+log(puz-plz)-((z1-E0)^2)/(2*V0)
eta1<-exp(g1)*sqrt(2*pi*v1)
# Tierney and Kadane approximation to E(Z+C) and E(Z)
E1<-eta1/eta0
postmean<-E1-C
# Tierney and Kadane numerator for E([Z+C]^2)
z2<-z1
d<-1
for (i in 1:n)
{if (abs(d)>tol)
{f<-(puz+plz)-1-(z2-E0)/V0+2/(z2+C)
fd<--(1/V0+puz*(1-puz)+plz*(1-plz)+2*(z2+C)^(-2))
d<-f/fd
z2<-z2-d
if (y==m)
{puz<-1}
else
{euz<-exp(cuts[y]-z2)
puz<-euz/(1+euz)
}
if (y==1)
{plz<-0}
else
{elz<-exp(cuts[y-1]-z2)
plz<-elz/(1+elz)
}
}
}
v2<- -1/fd
g2<-2*log(z2+C)+log(puz-plz)-((z2-E0)^2)/(2*V0)
eta2<-exp(g2)*sqrt(2*pi*v2)
# Tierney and Kadane approximation to E([Z+C]^2) and Var(Z)
E2<-eta2/eta0
postvar<-E2-E1^2
return(list(E1=postmean,V1=postvar))
}
TKordinal(y,E0,V0,cuts,tol=1E-5,n=20)
cuts
TKalbumin(y=0,E0=0,cuts=c(0,1,2),tol=1E-5,n=20)
TKalbumin(y=0,E0=0,cuts,tol=1E-5,n=20)
TKordinal(y=2,E0=0,V0,cuts=c(0,1,2),tol=1E-5,n=20)
TKordinal(y=2,E0=0,V0=0.5,cuts=c(0,1,2),tol=1E-5,n=20)
TKordinal(y=2,E0=-2,V0=0.5,cuts=c(0,1,2),tol=1E-5,n=20)
TKalbumin(y=0,E0=0,cuts=c(0,1,2),tol=1E-5,n=20)
sqrt(.4248155)
sqrt(.8063147)
eta
eta<-.4465923
log(eta+.5)-log(1+exp(eta))-eta^2/2
exp(log(eta+.5)-log(1+exp(eta))-eta^2/2)
.6517787*exp(log(eta+.5)-log(1+exp(eta))-eta^2/2)
exp(-log(1+exp(eta))-eta^2/2)
.8979503*exp(-log(1+exp(eta))-eta^2/2)
0.2178761/0.3171018
(0.2178761/0.3171018)-.5
TKalbumin<-function(y,E0,cuts,tol=1E-5,n=20)
{#MF 04/10/18
# Initial approximation
z0<-E0
d<-1
for (i in 1:n)
{if (abs(d)>tol)
{ez<-exp(z0)
pz<-ez/(1+ez)
f<-y-(z0-E0)-pz
fd<--(1+pz*(1-pz))
d<-f/fd
z0<-z0-d
}
}
ez<-exp(z0)
v0<- -1/fd
# Tierney and Kadane normalising constant (denominator)
g0<-z0*y -((z0-E0)^2)/2-log(1+ez)
eta0<-exp(g0)*sqrt(2*pi*v0)
# Mean shift
C<-5*sqrt(v0)-z0
# Tierney and Kadane numerator for E(Z+C)
z1<-z0
d<-1
for (i in 1:n)
{if (abs(d)>tol)
{ez<-exp(z1)
pz<-ez/(1+ez)
f<-y-(z1-E0)-pz+1/(z1+C)
fd<--(1+pz*(1-pz)+(z1+C)^(-2))
d<-f/fd
z1<-z1-d
}
}
ez<-exp(z1)
v1<- -1/fd
g1<-log(z1+C)+z1*y -((z1-E0)^2)/2-log(1+ez)
eta1<-exp(g1)*sqrt(2*pi*v1)
# Tierney and Kadane approximation to E(Z+C) and E(Z)
E1<-eta1/eta0
postmean<-E1-C
# Tierney and Kadane numerator for E([Z+C]^2)
z2<-z1
d<-1
for (i in 1:n)
{if (abs(d)>tol)
{ez<-exp(z2)
pz<-ez/(1+ez)
f<-y-(z2-E0)-pz+2/(z2+C)
fd<--(1+pz*(1-pz)+2*(z2+C)^(-2))
d<-f/fd
z2<-z2-d
}
}
ez<-exp(z2)
v2<- -1/fd
g2<-2*log(z2+C)+z2*y -((z2-E0)^2)/2-log(1+ez)
eta2<-exp(g2)*sqrt(2*pi*v2)
# Tierney and Kadane approximation to E([Z+C]^2) and Var(Z)
E2<-eta2/eta0
postvar<-E2-E1^2
return(list(E1=postmean,V1=postvar))
}
TKalbumin(y=0,E0=0,cuts=c(0,1,2),tol=1E-5,n=20)
TKalbumin<-function(y,E0,cuts,tol=1E-5,n=20)
{#MF 04/10/18
# Initial approximation
z0<-E0
d<-1
for (i in 1:n)
{if (abs(d)>tol)
{ez<-exp(z0)
pz<-ez/(1+ez)
f<-y-(z0-E0)-pz
fd<--(1+pz*(1-pz))
d<-f/fd
z0<-z0-d
}
}
ez<-exp(z0)
v0<- -1/fd
# Tierney and Kadane normalising constant (denominator)
g0<-z0*y -((z0-E0)^2)/2-log(1+ez)
eta0<-exp(g0)*sqrt(2*pi*v0)
# Mean shift
C<-5*sqrt(v0)-z0
# Tierney and Kadane numerator for E(Z+C)
z1<-z0
d<-1
for (i in 1:n)
{if (abs(d)>tol)
{ez<-exp(z1)
pz<-ez/(1+ez)
f<-y-(z1-E0)-pz+1/(z1+C)
fd<--(1+pz*(1-pz)+(z1+C)^(-2))
d<-f/fd
z1<-z1-d
}
}
ez<-exp(z1)
v1<- -1/fd
g1<-log(z1+C)+z1*y -((z1-E0)^2)/2-log(1+ez)
eta1<-exp(g1)*sqrt(2*pi*v1)
# Tierney and Kadane approximation to E(Z+C) and E(Z)
E1<-eta1/eta0
postmean<-E1-C
# Tierney and Kadane numerator for E([Z+C]^2)
z2<-z1
d<-1
for (i in 1:n)
{if (abs(d)>tol)
{ez<-exp(z2)
pz<-ez/(1+ez)
f<-y-(z2-E0)-pz+2/(z2+C)
fd<--(1+pz*(1-pz)+2*(z2+C)^(-2))
d<-f/fd
z2<-z2-d
}
}
ez<-exp(z2)
v2<- -1/fd
g2<-2*log(z2+C)+z2*y -((z2-E0)^2)/2-log(1+ez)
eta2<-exp(g2)*sqrt(2*pi*v2)
# Tierney and Kadane approximation to E([Z+C]^2) and Var(Z)
E2<-eta2/eta0
postvar<-E2-E1^2
return(list(E1=postmean,V1=postvar))
}
TKalbumin(y=0,E0=0,cuts=c(0,1,2),tol=1E-5,n=20)
TKordinal<-function(y,E0,V0,cuts,tol=1E-5,n=20)
{#MF 06/10/18
#y is an ordinal variable with possible values 1,2,...,m. If m=2 then we must set V0=1.
m<-length(cuts)+1
# Initial approximation
z0<-E0
d<-1
for (i in 1:n)
{if (abs(d)>tol)
{if (y==m)
{puz<-1}
else
{euz<-exp(cuts[y]-z0)
puz<-euz/(1+euz)
}
if (y==1)
{plz<-0}
else
{elz<-exp(cuts[y-1]-z0)
plz<-elz/(1+elz)
}
f<-(puz+plz)-1-(z0-E0)/V0
fd<--(1/V0+puz*(1-puz)+plz*(1-plz))
d<-f/fd
z0<-z0-d
}
}
vpost0<- -1/fd
# Tierney and Kadane normalising constant (denominator)
if (y==m)
{puz<-1}
else
{euz<-exp(cuts[y]-z0)
puz<-euz/(1+euz)
}
if (y==1)
{plz<-0}
else
{elz<-exp(cuts[y-1]-z0)
plz<-elz/(1+elz)
}
g0<-log(puz-plz)-((z0-E0)^2)/(2*V0)
eta0<-exp(g0)*sqrt(2*pi*vpost0)
# Mean shift
C<-5*sqrt(vpost0)-z0
# Tierney and Kadane numerator for E(Z+C)
z1<-z0
d<-1
for (i in 1:n)
{if (abs(d)>tol)
{f<-(puz+plz)-1-(z1-E0)/V0+1/(z1+C)
fd<--(1/V0+puz*(1-puz)+plz*(1-plz)+(z1+C)^(-2))
d<-f/fd
z1<-z1-d
if (y==m)
{puz<-1}
else
{euz<-exp(cuts[y]-z1)
puz<-euz/(1+euz)
}
if (y==1)
{plz<-0}
else
{elz<-exp(cuts[y-1]-z1)
plz<-elz/(1+elz)
}
}
}
v1<- -1/fd
g1<-log(z1+C)+log(puz-plz)-((z1-E0)^2)/(2*V0)
eta1<-exp(g1)*sqrt(2*pi*v1)
# Tierney and Kadane approximation to E(Z+C) and E(Z)
E1<-eta1/eta0
postmean<-E1-C
# Tierney and Kadane numerator for E([Z+C]^2)
z2<-z1
d<-1
for (i in 1:n)
{if (abs(d)>tol)
{f<-(puz+plz)-1-(z2-E0)/V0+2/(z2+C)
fd<--(1/V0+puz*(1-puz)+plz*(1-plz)+2*(z2+C)^(-2))
d<-f/fd
z2<-z2-d
if (y==m)
{puz<-1}
else
{euz<-exp(cuts[y]-z2)
puz<-euz/(1+euz)
}
if (y==1)
{plz<-0}
else
{elz<-exp(cuts[y-1]-z2)
plz<-elz/(1+elz)
}
}
}
v2<- -1/fd
g2<-2*log(z2+C)+log(puz-plz)-((z2-E0)^2)/(2*V0)
eta2<-exp(g2)*sqrt(2*pi*v2)
# Tierney and Kadane approximation to E([Z+C]^2) and Var(Z)
E2<-eta2/eta0
postvar<-E2-E1^2
return(list(E1=postmean,V1=postvar))
}
TKordinal(y=0,E0=0,V0=1,cuts=c(0,1,2),tol=1E-5,n=20)
TKordinal(y=0,E0=0,V0=1,cuts=c(0,1,2),tol=1E-5,n=20)
TKordinal(y=1,E0=0,V0=1,cuts=c(0,1,2),tol=1E-5,n=20)
TKordinal<-function(y,E0,V0,cuts,tol=1E-5,n=20)
{#MF 06/10/18
#y is an ordinal variable with possible values 1,2,...,m. If m=2 then we must set V0=1.
m<-length(cuts)+1
# Initial approximation
z0<-E0
d<-1
for (i in 1:n)
{if (abs(d)>tol)
{if (y==m)
{puz<-1}
else
{euz<-exp(cuts[y]-z0)
puz<-euz/(1+euz)
}
if (y==1)
{plz<-0}
else
{elz<-exp(cuts[y-1]-z0)
plz<-elz/(1+elz)
}
f<-(puz+plz)-1-(z0-E0)/V0
fd<--(1/V0+puz*(1-puz)+plz*(1-plz))
d<-f/fd
z0<-z0-d
}
}
vpost0<- -1/fd
# Tierney and Kadane normalising constant (denominator)
if (y==m)
{puz<-1}
else
{euz<-exp(cuts[y]-z0)
puz<-euz/(1+euz)
}
if (y==1)
{plz<-0}
else
{elz<-exp(cuts[y-1]-z0)
plz<-elz/(1+elz)
}
g0<-log(puz-plz)-((z0-E0)^2)/(2*V0)
eta0<-exp(g0)*sqrt(2*pi*vpost0)
# Mean shift
C<-5*sqrt(vpost0)-z0
# Tierney and Kadane numerator for E(Z+C)
z1<-z0
d<-1
for (i in 1:n)
{if (abs(d)>tol)
{f<-(puz+plz)-1-(z1-E0)/V0+1/(z1+C)
fd<--(1/V0+puz*(1-puz)+plz*(1-plz)+(z1+C)^(-2))
d<-f/fd
z1<-z1-d
if (y==m)
{puz<-1}
else
{euz<-exp(cuts[y]-z1)
puz<-euz/(1+euz)
}
if (y==1)
{plz<-0}
else
{elz<-exp(cuts[y-1]-z1)
plz<-elz/(1+elz)
}
}
}
v1<- -1/fd
g1<-log(z1+C)+log(puz-plz)-((z1-E0)^2)/(2*V0)
eta1<-exp(g1)*sqrt(2*pi*v1)
# Tierney and Kadane approximation to E(Z+C) and E(Z)
E1<-eta1/eta0
postmean<-E1-C
# Tierney and Kadane numerator for E([Z+C]^2)
z2<-z1
d<-1
for (i in 1:n)
{if (abs(d)>tol)
{f<-(puz+plz)-1-(z2-E0)/V0+2/(z2+C)
fd<--(1/V0+puz*(1-puz)+plz*(1-plz)+2*(z2+C)^(-2))
d<-f/fd
z2<-z2-d
if (y==m)
{puz<-1}
else
{euz<-exp(cuts[y]-z2)
puz<-euz/(1+euz)
}
if (y==1)
{plz<-0}
else
{elz<-exp(cuts[y-1]-z2)
plz<-elz/(1+elz)
}
}
}
v2<- -1/fd
g2<-2*log(z2+C)+log(puz-plz)-((z2-E0)^2)/(2*V0)
eta2<-exp(g2)*sqrt(2*pi*v2)
# Tierney and Kadane approximation to E([Z+C]^2) and Var(Z)
E2<-eta2/eta0
postvar<-E2-E1^2
return(list(E1=postmean,V1=postvar))
}
TKordinal(y=2,E0=0,V0=1,cuts=c(0,1,2),tol=1E-5,n=20)
TKordinal(y=3,E0=0,V0=1,cuts=c(0,1,2),tol=1E-5,n=20)
TKordinal(y=100,E0=0,V0=1,cuts=c(0,1,2),tol=1E-5,n=20)
TKordinal(y=10,E0=0,V0=1,cuts=c(0,1,2),tol=1E-5,n=20)
TKordinal(y=9,E0=0,V0=1,cuts=c(0,1,2),tol=1E-5,n=20)
TKordinal(y=8,E0=0,V0=1,cuts=c(0,1,2),tol=1E-5,n=20)
TKordinal(y=7,E0=0,V0=1,cuts=c(0,1,2),tol=1E-5,n=20)
TKordinal(y=6,E0=0,V0=1,cuts=c(0,1,2),tol=1E-5,n=20)
TKordinal(y=5,E0=0,V0=1,cuts=c(0,1,2),tol=1E-5,n=20)
TKordinal(y=4,E0=0,V0=1,cuts=c(0,1,2),tol=1E-5,n=20)
cuts
TKordinal(y=0,E0=0,V0=1,cuts=1,tol=1E-5,n=20)
TKordinal(y=1,E0=0,V0=1,cuts=1,tol=1E-5,n=20)
TKordinal(y=2,E0=0,V0=1,cuts=1,tol=1E-5,n=20)
TKordinal(y=3,E0=0,V0=1,cuts=1,tol=1E-5,n=20)
TKordinal(y=3,E0=0,V0=1,cuts=c(1,2,3,4,5),tol=1E-5,n=20)
TKordinal(y=1,E0=0,V0=1,cuts=c(1,2,3,4,5),tol=1E-5,n=20)
TKordinal(y=2,E0=0,V0=1,cuts=c(1,2,3,4,5),tol=1E-5,n=20)
TKordinal(y=3,E0=0,V0=1,cuts=c(1,2,3,4,5),tol=1E-5,n=20)
TKordinal(y=4,E0=0,V0=1,cuts=c(1,2,3,4,5),tol=1E-5,n=20)
TKordinal(y=5,E0=0,V0=1,cuts=c(1,2,3,4,5),tol=1E-5,n=20)
TKordinal(y=6,E0=0,V0=1,cuts=c(1,2,3,4,5),tol=1E-5,n=20)
TKordinal(y=7,E0=0,V0=1,cuts=c(1,2,3,4,5),tol=1E-5,n=20)
sum(seq(-3,5))
mean(seq(-3,5))
knitr::opts_chunk$set(message=FALSE,warning=FALSE, cache=TRUE)
x<-c(4,5,1,-2)
x
mean(x)
